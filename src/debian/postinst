#!/bin/bash
#--------------------------------------
# Script Name:  postinst
# Version:      1.2
# Authors:      skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         08 Nov 24
# Purpose:      Configures the package after files are unpacked by initializing services, databases, and required configurations to make the package operational.
#--------------------------------------

log_info() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $1"; }
log_warn() { echo -e "\033[1;33m[WARN]\033[0m $1"; }
log_error() { echo -e "\033[0;31m[ERROR]\033[0m $1" >&2; }

readonly OPERATION="${1}"

# Source helper script from i2b2 package
source_i2b2_helper() {
  local helper_path="/usr/share/__I2B2_PACKAGE_NAME__/helper.sh"
  log_info "Loading i2b2 helper script..."
  if [[ ! -f "${helper_path}" ]]; then
    log_error "i2b2 helper script not found at ${helper_path}"
    return 1
  fi
  source "${helper_path}"
  log_success "Helper script loaded"
}

configure_apache() {
  log_info "Setting up Apache proxy..."
  a2enmod proxy_http >/dev/null || true
  a2enconf aktin-j2ee-reverse-proxy >/dev/null || true
  systemctl restart apache2
  log_success "Apache proxy configured"
}

init_and_seed_aktin_database() {
  connect_to_psql
  log_info "Initializing AKTIN database..."
  if [[ $(eval "${PSQL} -l" | grep -c "aktin") -eq 0 ]]; then
    eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/addon_i2b2metadata.sql" >/dev/null
    eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/addon_i2b2crcdata.concept_dimension.sql" >/dev/null
    eval "${PSQL} -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/aktin_init.sql" >/dev/null
    log_success "Database initialized successfully"
  else
    log_info "Database AKTIN already exists"
  fi
}

# TODO: Version tracking which updates have already been applied
apply_database_updates() {
  connect_to_psql
  local sql_dir="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql"
  local updates=($(find "${sql_dir}" -name "update*.sql" | sort))
  log_info "Checking for database updates..."

  if [[ ${#updates[@]} -eq 0 ]]; then
    log_warn "No updates available"
    return 0
  fi
  for update in "${updates[@]}"; do
    local update_name=$(basename "$update" .sql)
    log_info "Applying ${update_name}..."
    eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f ${update}" >/dev/null
  done
  log_success "Database updates applied"
}

restore_aktin_properties() {
  local backups=(/etc/aktin/backup_*.properties)
  log_info "Restoring AKTIN configuration..."

  if [[ ! -f "${backups[0]}" ]]; then
    log_warn "No backup found"
    return 0
  fi
  local newest_backup="$(ls -t "${backups[@]}" | head -1)"
  while IFS= read -r line; do
    [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
    local key="${line%%=*}"
    local value="${line#*=}"
    sed -i "s|^${key}=.*|${key}=${value}|" /etc/aktin/aktin.properties
  done < "${newest_backup}"
  log_success "Configuration restored from ${newest_backup}"
}

link_properties_to_wildfly() {
  log_info "Creating symbolic link for AKTIN properties in WildFly..."
  ln -sf /etc/aktin/aktin.properties /opt/wildfly/standalone/configuration/
  log_success "Symbolic link created in WildFly configuration directory"
}

# TODO: Duplicate code with triggered/restore_and_configure_wildfly()
add_aktin_datasource() {
  local jdbc_driver=$(ls /opt/wildfly/standalone/deployments/postgresql-*.jar 2>/dev/null | head -n 1)
  log_info "Configuring AKTIN datasource for Wildfly..."

  if [ -n "${jdbc_driver}" ]; then
    local jdbc_version=$(basename "${jdbc_driver}" | sed -E 's/postgresql-(.*)\.jar/\1/')
    local cli_file="/opt/wildfly/bin/add-aktin-config.cli"
    local temp_cli=$(mktemp)
    sed -e "s|__POSTGRES_JDBC_VERSION__|${jdbc_version}|g" "${cli_file}" > "${temp_cli}"
    /opt/wildfly/bin/jboss-cli.sh --file="${temp_cli}"
    log_success "AKTIN datasource configured"
  else
    log_error "No PostgreSQL JDBC driver found"
  fi
  # Cleanup
  rm -f "${temp_cli}"
}

# update files uploaded with old p21 scripts to newest script id
update_p21_script_refs() {
  local import_dir="/var/lib/aktin/import"
  log_info "Updating import script references..."

  if [[ -n $(ls "${import_dir}" 2>/dev/null) ]]; then
    for folder in "${import_dir}"/*; do
      sed -i "s|script=p21.*|script=p21|" "$folder/properties"
    done
    log_success "Script references updated"
  else
    log_warn "No import files found"
  fi
}

# TODO change to thrown trigger for i2b2 package
set_wildfly_permissions() {
  log_info "Setting up Wildfly user permissions..."
  chown -R wildfly:wildfly /opt/wildfly
  chown -R wildfly:wildfly /var/lib/aktin
  log_success "WildFly user permissions set"
}

main() {
  set -euo pipefail
  case "$OPERATION" in
    configure)
      # Runs during installation/upgrade after files have been unpacked
      source_i2b2_helper
      configure_apache
      init_and_seed_aktin_database
      apply_database_updates
      restore_aktin_properties
      link_properties_to_wildfly
      add_aktin_datasource
      update_p21_script_refs
      set_wildfly_permissions
      check_and_start_service "wildfly"
      ;;
  esac
}

main "$@"
