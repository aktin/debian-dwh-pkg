#!/bin/bash
#--------------------------------------
# Script Name:  postinst
# Version:      1.1
# Authors:      skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         04 Nove 24
# Purpose:      Post-installation script that configures AKTIN DWH by setting up Apache proxy, managing database, configuring WildFly, and handling
#               import scripts.
#--------------------------------------

readonly OPERATION="${1}"
readonly I2B2_PACKAGE_NAME="__I2B2_PACKAGE_NAME__"
readonly AKTIN_PROPERTIES="/etc/aktin/aktin.properties"

# Source helper script from i2b2 package
source_i2b2_helper() {
  local helper_path="/usr/share/${I2B2_PACKAGE_NAME}/helper.sh"
  echo "Loading i2b2 helper script..."
  if [[ ! -f "${helper_path}" ]]; then
    echo "Error: i2b2 helper script not found at ${helper_path}" >&2
    return 1
  fi
  source "${helper_path}"
}

restore_aktin_properties() {
  local backups=(/etc/aktin/backup_*.properties)
  echo "Restoring AKTIN configuration..."

  if [[ ! -f "${backups[0]}" ]]; then
    echo "No backup found"
    return 0
  fi

  local newest_backup="$(ls -t "${backups[@]}" | head -1)"
  while IFS= read -r line; do
    [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
    local key="${line%%=*}"
    local value="${line#*=}"
    sed -i "s|^${key}=.*|${key}=${value}|" "${AKTIN_PROPERTIES}"
  done < "${newest_backup}"
}

configure_aktin_properties() {
  echo "Configuring AKTIN properties..."
  chown -R wildfly:wildfly /etc/aktin
  ln -sf "${AKTIN_PROPERTIES}" /opt/wildfly/standalone/configuration/
}

configure_apache() {
  echo "Setting up Apache proxy..."
  a2enmod proxy_http >/dev/null || true
  a2enconf aktin-j2ee-reverse-proxy >/dev/null || true
  systemctl restart apache2
}

init_and_seed_aktin_database() {
  connect_to_psql
  wait_for_psql_connection
  echo "Initializing AKTIN database..."
  if [[ $(eval "${PSQL} -l" | grep -c "aktin") -eq 0 ]]; then
    eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/addon_i2b2metadata.i2b2.sql" >/dev/null
    eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/addon_i2b2crcdata.concept_dimension.sql" >/dev/null
    eval "${PSQL} -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/aktin_postgres_init.sql" >/dev/null
  else
    echo "Database already exists"
  fi
}

# TODO: Version tracking which updates have already been applied
apply_database_updates() {
  connect_to_psql
  wait_for_psql_connection
  echo "Checking for database updates..."

  local updates=(/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/update_*.sql)
  if [[ ! -f "${updates[0]}" ]]; then
   echo "No updates available"
   return 0
  fi

  for update in "${updates[@]}"; do
   eval "${PSQL} -d i2b2 -v ON_ERROR_STOP=1 -f ${update}" >/dev/null
  done
 }

# update files uploaded with old p21 scripts to newest script id
update_p21_script_refs() {
  local import_dir="/var/lib/aktin/import"
  echo "Updating import script references..."
  if [[ -n $(ls "${import_dir}" 2>/dev/null) ]]; then
    for folder in "${import_dir}"/*; do
      sed -i "s|script=p21.*|script=p21|" "$folder/properties"
    done
  else
    echo "No import files found"
  fi
}

# TODO: Duplicate code with triggered/restore_and_configure_wildfly()
# deploy AKTIN datasource for installed postgresql jdbc driver
configure_wildfly() {
  local jdbc_driver=$(ls /opt/wildfly/standalone/deployments/postgresql-*.jar 2>/dev/null | head -n 1)
  echo "Configuring WildFly datasource..."
  if [ -n "${jdbc_driver}" ]; then
    local jdbc_version=$(basename "${jdbc_driver}" | sed -E 's/postgresql-(.*)\.jar/\1/')
    local temp_cli=$(mktemp)
    local cli_file="/opt/wildfly/bin/aktin_config.cli"
    sed -i "s/__POSTGRES_JDBC_VERSION__/${jdbc_version}/g" "${temp_cli}"
    /opt/wildfly/bin/jboss-cli.sh --file="${cli_file}"
  else
    echo "Error: No PostgreSQL JDBC driver found" >&2
  fi
  # Cleanup
  rm -f "${temp_cli}"
}

main() {
  set -euo pipefail
  case "$OPERATION" in
    configure)
      # Runs during installation/upgrade after files have been unpacked.
      source_i2b2_helper
      check_and_start_service "apache2"
      configure_apache
      check_and_start_service "postgresql"
      init_and_seed_aktin_database
      apply_database_updates
      check_and_start_service "wildfly"
      restore_aktin_properties
      configure_aktin_properties
      configure_wildfly
      update_p21_script_refs
      echo "Restarting WildFly..."
      systemctl restart wildfly
      ;;
  esac
}

main "$@"
