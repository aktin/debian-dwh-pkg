#!/bin/bash
#--------------------------------------
# Script Name:  triggered
# Version:      1.1
# Authors:      akombeiz@ukaachen.de
# Date:         08 Nov 24
# Purpose:      Handles backup and restore of DWH artifacts during WildFly updates. Gets triggered by the i2b2 package before and after WildFly
#               updates to ensure DWH components survive the update process.
#--------------------------------------

log_info() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $1"; }
log_warn() { echo -e "\033[1;33m[WARN]\033[0m $1"; }
log_error() { echo -e "\033[0;31m[ERROR]\033[0m $1" >&2; }

readonly OPERATION="${1}"
readonly BACKUP_DIR="/var/backups/${DPKG_MAINTSCRIPT_PACKAGE}/wildfly"

backup_wildfly_artifacts() {
  log_info "Backing up WildFly artifacts..."
  mkdir -p "${BACKUP_DIR}"

  # Backup EAR file if exists
  if compgen -G "/opt/wildfly/standalone/deployments/dwh-j2ee-*.ear" > /dev/null; then
    log_info "Backing up DWH application (EAR)"
    cp -f /opt/wildfly/standalone/deployments/dwh-j2ee-*.ear "${BACKUP_DIR}/"
  else
    log_warn "No DWH application (EAR) found to backup"
  fi

  # Backup CLI configuration if exists
  local -r cli_files=("add-aktin-config.cli" "remove-aktin-config.cli")
  local cli_count=0
  for cli_file in "${cli_files[@]}"; do
    local cli_path="/opt/wildfly/bin/${cli_file}"
    if [ -f "${cli_path}" ]; then
      log_info "Backing up WildFly CLI script: ${cli_file}"
      cp -f "${cli_path}" "${BACKUP_DIR}/"
      ((cli_count++))
    fi
  done
  if [ ${cli_count} -eq 0 ]; then
    log_warn "No WildFly CLI scripts found to backup"
  fi

  log_success "Backup completed"
}

restore_and_configure_wildfly() {
  log_info "Applying backed up WildFly artifacts..."
  if [ ! -d "${BACKUP_DIR}" ]; then
    log_warn "No backups found to restore"
    return 0
  fi

  # Restore EAR file
  if compgen -G "${BACKUP_DIR}/dwh-j2ee-*.ear" > /dev/null; then
    log_info "Restoring DWH application (EAR)"
    cp -f "${BACKUP_DIR}"/dwh-j2ee-*.ear /opt/wildfly/standalone/deployments/
    log_success "EAR file restored"
  fi

  # Restore and configure CLI script
  if [ -f "${BACKUP_DIR}/add-aktin-config.cli" ]; then
    log_info "Restoring and configuring WildFly datasource"
    # Create temporary copy for modification
    cp -f "${BACKUP_DIR}/add-aktin-config.cli" /opt/wildfly/bin/

    # Update JDBC version in temporary CLI file
    local jdbc_driver=$(ls /opt/wildfly/standalone/deployments/postgresql-*.jar 2>/dev/null | head -n 1)
    if [ -n "${jdbc_driver}" ]; then
      log_info "Configuring AKTIN datasource for Wildfly..."
      local jdbc_version=$(basename "${jdbc_driver}" | sed -E 's/postgresql-(.*)\.jar/\1/')
      local cli_file="/opt/wildfly/bin/add-aktin-config.cli"
      local temp_cli=$(mktemp)
      sed -e "s|__POSTGRES_JDBC_VERSION__|${jdbc_version}|g" "${cli_file}" > "${temp_cli}"
      /opt/wildfly/bin/jboss-cli.sh --file="${temp_cli}"
      log_success "AKTIN datasource configured"
    else
      log_error "No PostgreSQL JDBC driver found"
    fi
    rm -f "${temp_cli}"
  fi

  # Cleanup backup directory
  log_info "Cleaning up backup directory"
  rm -rf "${BACKUP_DIR}"
  log_success "Restore completed"
}

main() {
  set -euo pipefail
  case "$OPERATION" in
    __TRIGGER_PREFIX__-backup)
      # Before WildFly update
      backup_wildfly_artifacts
      ;;
    __TRIGGER_PREFIX__-restore)
      # After WildFly update
      restore_and_configure_wildfly
      ;;
  esac
}

main "$@"
