#! /bin/bash

set -euo pipefail

readonly RESOURCES=$(pwd)/resources
readonly BINARIES=$RESOURCES/binaries
readonly PROPERTIES_FILES=$RESOURCES/properties
readonly XML_FILES=$RESOURCES/xml

readonly RES='\e[0m'
readonly RED='\e[0;31m'
readonly GRE='\e[0;32m'
readonly YEL='\e[0;33m'
readonly BRED='\e[1;31m'
readonly BGRE='\e[1;32m'
readonly BYEL='\e[1;33m'

# destination url
readonly URL='http://localhost:80/aktin/admin/rest'
readonly URL_FHIR='http://localhost:80/aktin/cda/fhir/Binary/'

# login into aktin/admin and get bearer-token
readonly BEARER_TOKEN=$(curl -s --location --request POST $URL/auth/login/ --header 'Content-Type: application/json' --data-raw '{ "username": "i2b2", "password": "demouser" }')

readonly IMPORT_SCRIPT=p21_enc

# # # # # # # # #
# upload p21 data
# # # # # # # # #
RESPONSE_CODE=$(curl -s -o /dev/null -w '%{http_code}' -F "data=@$BINARIES/p21.zip" --location --request POST ''$URL'/file?scriptId='${IMPORT_SCRIPT}'&filename=P21' --header 'Authorization: Bearer '$BEARER_TOKEN'')
if [[ $RESPONSE_CODE == 201 ]]; then
	echo -e "${GRE}UPLOAD of P21 data successful ($RESPONSE_CODE)${RES}"
else
	echo -e "${RED}UPLOAD of P21 data failed ($RESPONSE_CODE)${RES}"
	exit 1
fi

declare ID_P21=$(curl -s --request GET $URL/file | jq '.[] | select(.script=="'${IMPORT_SCRIPT}'") | .id' | cut -d "\"" -f 2)

# # # # # # # # #
# upload patients
# # # # # # # # #
CURRENT_DAY=$(date '+%Y-%m-%d')
for x in {1000..1138};
do
    sed -i "s|<id root=\"1.2.276.0.76.4.8\" extension=.*|<id root=\"1.2.276.0.76.4.8\" extension=\"P$x\"/>|g" $XML_FILES/storyboard06.xml
    sed -i "s|<id root=\"1.2.276.0.76.3.87686\" extension=.*|<id root=\"1.2.276.0.76.3.87686\" extension=\"$x\"/>|g" $XML_FILES/storyboard06.xml

	RESPONSE=$(java -Djava.util.logging.config.file="$PROPERTIES_FILES/logging.properties" -cp "$BINARIES/demo-server-0.14.jar" org.aktin.cda.etl.demo.client.FhirClient $URL_FHIR $XML_FILES/storyboard06.xml 2<&1)

	RESPONSE_CODE=$(echo $RESPONSE | grep -oP '(?<=Response code: )[0-9]+')
    case "$RESPONSE_CODE" in
    200)
        echo -e "${GRE}Updated patient P$x${RES}"
        ;;
    201)
        echo -e "${GRE}Imported patient P$x${RES}"
        ;;
    *)
		echo -e "${RED}Upload of patient P$x failed ($RESPONSE_CODE)${RES}"
		echo $RESPONSE
        ;;
    esac
done

# # # # # # # # #
# start file verification
# # # # # # # # #
RESPONSE_CODE=$(curl -s -o /dev/null -w '%{http_code}' --location --request POST $URL/script/$ID_P21/verify --header 'Authorization: Bearer '$BEARER_TOKEN'')
if [[ $RESPONSE_CODE == 204 ]]; then
    echo -e "${GRE}VERIFY of P21 data successful ($RESPONSE_CODE)${RES}"
else
    echo -e "${RED}VERIFY of P21 data failed ($RESPONSE_CODE)${RES}"
    exit 1
fi

# # # # # # # # #
# start file import
# # # # # # # # #
RESPONSE_CODE=$(curl -s -o /dev/null -w '%{http_code}' --location --request POST $URL/script/$ID_P21/import --header 'Authorization: Bearer '$BEARER_TOKEN'')
if [[ $RESPONSE_CODE == 204 ]]; then
    echo -e "${GRE}IMPORT of P21 data successful ($RESPONSE_CODE)${RES}"
else
    echo -e "${RED}IMPORT of P21 data failed ($RESPONSE_CODE)${RES}"
    exit 1
fi

echo "wait 30s"
sleep 30s

# # # # # # # # #
# check if file import of p21.zip was successul
# # # # # # # # #
OPERATION=$(grep '^operation=' /var/lib/aktin/import/$ID_P21/properties | cut -d'=' -f2)
if [[ $OPERATION == 'importing' ]]; then
    echo -e "${GRE}$ID_P21 successfully changed operation to importing${RES}"
else
    echo -e "${RED}$ID_P21 has operation $OPERATION (should be importing)${RES}"
    exit 1
fi

STATE=$(grep '^state=' /var/lib/aktin/import/$ID_P21/properties | cut -d'=' -f2)
if [[ $STATE == 'successful' ]]; then
    echo -e "${GRE}$ID_P21 successfully changed state to successful${RES}"
else
    echo -e "${RED}$ID_P21 has state $STATE (should be successful)${RES}"
    exit 1
fi

# TODO iterate through csv row by row

# # # # # # # # #
# chount p21 columns for each imported encounter and compare with predefined
# # # # # # # # #
ARRAY_COUNT_P21=( 28 25 26 24 24 24 26 26 26 25 25 25 25 25 26 26 26 26 26 26 26 0 0 26 26 26 26 26 26 26 0 0 25 25 25 26 26 26 26 26 26 26 26 26 26 26 26 26 25 25 26 25 25 0 0 0 25 25 25 25 26 26 26 26 25 26 25 25 25 25 25 25 25 25 25 25 26 26 26 26 26 26 25 25 25 25 25 25 26 26 26 26 25 25 32 20 20 20 20 33 20 20 33 33 32 32 33 33 33 32 32 33 33 26 26 33 33 32 32 33 33 33 32 32 23 23 26 26 26 23 23 26 26 25 25 23 23 23 23 )
ARRAY_ENC_ID=($(seq 1000 1 1138))
for i in "${!ARRAY_ENC_ID[@]}"
do
    ENC_IDE=$(echo -n "1.2.276.0.76.3.87686/${ARRAY_ENC_ID[$i]}"| openssl sha1 -binary | base64)
    ENC_IDE=$(echo $ENC_IDE | tr \/ _)
    ENC_IDE=$(echo $ENC_IDE | tr + -)

    ENC_NUM=$(sudo -u postgres psql -X -A -d i2b2 -v ON_ERROR_STOP=1 -t -c "SELECT encounter_num FROM i2b2crcdata.encounter_mapping WHERE encounter_ide='$ENC_IDE'")
    if [[ ! -z $ENC_NUM ]]; then
        COUNT_P21=$(sudo -u postgres psql -X -A -d i2b2 -v ON_ERROR_STOP=1 -t -c "SELECT COUNT(provider_id) FROM i2b2crcdata.observation_fact WHERE encounter_num='$ENC_NUM' AND provider_id='P21'")
        if [[ $COUNT_P21 == ${ARRAY_COUNT_P21[$i]} ]]; then
            echo -e "${GRE}Count of Encounter ${ARRAY_ENC_ID[$i]} (Num:$ENC_NUM) is a match${RES}"
        else
            echo -e "${RED}Count of Encounter ${ARRAY_ENC_ID[$i]} (Num:$ENC_NUM) does not match ($COUNT_P21 instead of ${ARRAY_COUNT_P21[$i]}) ${RES}"
            exit 1
        fi
    fi
done
